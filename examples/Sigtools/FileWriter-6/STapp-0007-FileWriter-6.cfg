+EPICSCAInterface= {
    Class = EPICS::EPICSCAClient
    StackSize = 1048576
    CPUs = 0x1
    AutoStart = 0
    +PV_STATUS = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour-5:STATUS"
        PVType = int32
    }    
    +PV_COMMAND = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour-5:COMMAND"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "GOTORUN"}, {"0", "GOTOIDLE"}}
        }
    }
    +PV_ERROR_RST = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour-5:RESET"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Ignore
            Function = "RESET" 
        }
    }
    +PV_FILE = {
        Class = EPICS::EPICSPV
        PVName = "FileWriter-Behaviour-5:FILE"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "FLUSH"}}
        }
    }
}
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2-dev/Resources/HTTP/"
    }    
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +StartEPICSCAInterface = {
                Class = Message
                Destination = "EPICSCAInterface"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +DoSomethingWhenEntering = {
                Class = Message
                Destination = SignalsWriter
                Mode = ExpectsIndirectReply
                Function = FlushFile
            }
//            +SetStatusPV = {
//                Class = Message
//                Destination = "EPICSCAInterface.PV_STATUS"
//                Function = CAPut
//                Mode = ExpectsReply
//                +Parameters = {
//                    Class = ConfigurationDatabase
//                    param1 = 1
//                }
//            }
        }
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +FLUSH = {
            Class = ReferenceContainer
            +DoSomethingWhenEntering = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = FlushFile
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 20
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32           
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
            }
        }
        +GAMTrigger= {
            Class = MathExpressionGAM
            // This GAM outputs 1 each time Interval ms elapses and continues to do so for RecordTime ms, and 0 at all other times.
            Expression = "
                            Interval = (uint32) 4000000;
                            RecordTime = (uint32) 50000; 
                            Modulus = (uint32) ((float64) Interval * ((float64) Time / (float64) Interval - (float64) ((uint32) ((float64) Time / (float64) Interval))));
                            Trigger = (uint8) (Modulus <= RecordTime);
                         "
            InputSignals = {
                Time = {
                    Type = uint32
                    NumberOfElements = 1
                    DataSource = DDB1
                }
            }
            OutputSignals = {
                Trigger = {
                    Type = uint8
                    DataSource = DDB1
                }
            }
        }
//        +GAMMeasurements = {
//            Class = IOGAM
//            InputSignals = {
//                Measurement0 = {
//                    Type = float64
//                    DataSource = DDB1
//                    Default = 0
//                    Alias = Control0
//                }
//                Measurement1 = {
//                    Type = float64
//                    DataSource = DDB1
//                    Default = 0
//                }
//                Measurement2 = {
//                    Type = float64
//                    DataSource = DDB1
//                    Default = 0
//                }
//                Measurement3 = {
//                    Type = float64
//                    DataSource = DDB1
//                    Default = 0
//                }
//            }
//            OutputSignals = {
//                Measurement0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Measurement1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Measurement2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Measurement3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//            }
//        }
        +GAMRef0 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 10
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
//        +GAMRef1 = {
//            Class = WaveformGAM::WaveformSin
//            Amplitude = 1.0
//            Frequency = 3.0
//            Phase = 0.0
//            Offset = 0.0
//            InputSignals = {
//                Time = {
//                    DataSource = DDB1
//                    Type = uint32 
//                }
//            }
//            OutputSignals = {
//                Reference1 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//            }
//        }
//        +GAMRef2 = {
//            Class = WaveformGAM::WaveformSin
//            Amplitude = 1.0
//            Frequency = 7.0
//            Phase = 0.0
//            Offset = 0.0
//            InputSignals = {
//                Time = {
//                    DataSource = DDB1
//                    Type = uint32 
//                }
//            }
//            OutputSignals = {
//                Reference2 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//            }
//        }
//        +GAMRef3 = {
//            Class = WaveformGAM::WaveformSin
//            Amplitude = 1.0
//            Frequency = 10.0
//            Phase = 0.0
//            Offset = 0.0
//            InputSignals = {
//                Time = {
//                    DataSource = DDB1
//                    Type = uint32 
//                }
//            }
//            OutputSignals = {
//                Reference3 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//            }
//        }
//        +GAMSSM = {
//            Class = SSMGAM
//            StateMatrix = {
//                {1 0 0 0 0 0 0 0} 
//                {0 1 0 0 0 0 0 0} 
//                {0 0 1 0 0 0 0 0} 
//                {0 0 0 1 0 0 0 0} 
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0}
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0}
//            } 
//            InputMatrix = {
//                {0.005 0 0 0 -0.005 0 0 0} 
//                {0 0.005 0 0 0 -0.005 0 0} 
//                {0 0 0.005  0 0 0 -0.005 0} 
//                {0 0 0 0.005 0 0 0 -0.005} 
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0}
//            }
//            OutputMatrix = {
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0} 
//                {0 0 0 0 0 0 0 0} 
//                {1 0 0 0 0 0 0 0} 
//                {0 1 0 0 0 0 0 0} 
//                {0 0 1 0 0 0 0 0} 
//                {0 0 0 1 0 0 0 0} 
//            }  
//            FeedthroughMatrix = {
//                {1 0 0 0 -1 0 0 0} 
//                {0 1 0 1 0 -1 0 0} 
//                {0 0 1 0 0 0 -1 0} 
//                {0 0 0 1 0 0 0 -1} 
//                {0.01 0 0 0 -0.01 0 0 0} 
//                {0 1 0 0 0 -1 0 0} 
//                {0 0 1 0 0 0 -1 0} 
//                {0 0 0 1 0 0 0 -1} 
//            } 
//            ResetInEachState = 1
//            InputSignals = {
//                Reference0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Reference1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Reference2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Reference3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Measurement0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Measurement1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Measurement2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Measurement3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//            }
//            OutputSignals = {
//                Error0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Error1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Error2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Error3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State4 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State5 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State6 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State7 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//
//            }
//        }
//        +GAMPerformanceWriter = {
//            Class = IOGAM
//            InputSignals = {
//                Time = {
//                    DataSource = DDB1
//                    Type = uint32
//                }
//                Idle_Thread1_CycleTime = {                  
//                    DataSource = DDB1
//                    Type = uint32           
//                }
//                Run_Thread1_CycleTime = {                   
//                    DataSource = DDB1
//                    Type = uint32           
//                }
//                GAMTimer_ReadTime = {
//                    DataSource = Timings
//                    Type = uint32           
//                } 
//                GAMTimer_ExecTime = {
//                    DataSource = Timings
//                    Type = uint32           
//                }
//                GAMTimer_WriteTime = {
//                    DataSource = Timings
//                    Type = uint32           
//                }
//                GAMPerformanceWriter_WriteTime= {
//                    DataSource = Timings
//                    Type = uint32           
//                }
//            }
//            OutputSignals = {
//                Time = {
//                    DataSource = PerformanceWriter
//                    Type = uint32
//                }
//                Idle_Thread1_CycleTime = {                  
//                    DataSource = PerformanceWriter
//                    Type = uint32           
//                }
//                Run_Thread1_CycleTime = {                   
//                    DataSource = PerformanceWriter
//                    Type = uint32           
//                }
//                GAMTimer_ReadTime = {
//                    DataSource = PerformanceWriter 
//                    Type = uint32           
//                } 
//                GAMTimer_ExecTime = {
//                    DataSource = PerformanceWriter
//                    Type = uint32           
//                }
//                GAMTimer_WriteTime = {
//                    DataSource = PerformanceWriter
//                    Type = uint32           
//                }
//                GAMPerformanceWriter_WriteTime= {
//                    DataSource = PerformanceWriter
//                    Type = uint32           
//                }
//            }
//        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
                Trigger = {
                    DataSource = DDB1
                    Type = uint8
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
//                Reference1 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//                Reference2 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//                Reference3 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//                Measurement0 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//                Measurement1 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//                Measurement2 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//                Measurement3 = {
//                    DataSource = DDB1
//                    Type = float64
//                }
//                Error0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Error1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Error2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Error3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                Control3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State0 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State1 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State2 = {
//                    Type = float64
//                    DataSource = DDB1
//                }
//                State3 = {
//                    Type = float64
//                    DataSource = DDB1
//                }

            }
            OutputSignals = {
                Trigger = {
                    DataSource = SignalsWriter
                    Type = uint8
                }
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                Reference0 = {
                    DataSource = SignalsWriter
                    Type = float64
                }
//                Reference1 = {
//                    DataSource = SignalsWriter
//                    Type = float64
//                }
//                Reference2 = {
//                    DataSource = SignalsWriter
//                    Type = float64
//                }
//                Reference3 = {
//                    DataSource = SignalsWriter
//                    Type = float64
//                }
//                Measurement0 = {
//                    DataSource = SignalsWriter
//                    Type = float64
//                }
//                Measurement1 = {
//                    DataSource = SignalsWriter
//                    Type = float64
//                }
//                Measurement2 = {
//                    DataSource = SignalsWriter
//                    Type = float64
//                }
//                Measurement3 = {
//                    DataSource = SignalsWriter
//                    Type = float64
//                }
//                Error0 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                Error1 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                Error2 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                Error3 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                Control0 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                Control1 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                Control2 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                Control3 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                State0 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                State1 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                State2 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
//                State3 = {
//                    Type = float64
//                    DataSource = SignalsWriter 
//                }
            }
        }
        +DisplayGAM = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    Type = uint32
                    DataSource = DDB1
                }
                Trigger = {
                    Type = uint8
                    DataSource = DDB1
                }
            }
            OutputSignals = {
                Time = {
                    Type = uint32
                    DataSource = LoggerDataSource
                }
                Trigger = {
                    Type = uint8
                    DataSource = LoggerDataSource
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +SignalsWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/opt/MARTe2/Projects/MARTe2-sigtools/MARTe2-demos-sigtools/temp/RTApp-FileWriter-Behaviour.csv" 
            Overwrite = "yes"
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 1
            NumberOfPreTriggers = 0
            NumberOfPostTriggers = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            Signals = {
                Trigger = {
                    Type = uint8
                }
                Time = { 
                    Type = uint32
                }
                Reference0 = {
                    Type = float64
                }
//                Reference1 = {
//                    Type = float64
//                }
//                Reference2 = {
//                    Type = float64
//                }
//                Reference3 = {
//                    Type = float64
//                }
//                Measurement0 = {
//                    Type = float64
//                }
//                Measurement1 = {
//                    Type = float64
//                }
//                Measurement2 = {
//                    Type = float64
//                }
//                Measurement3 = {
//                    Type = float64
//                }
//                Error0 = {
//                    Type = float64
//                }
//                Error1 = {
//                    Type = float64
//                }
//                Error2 = {
//                    Type = float64
//                }
//                Error3 = {
//                    Type = float64
//                }
//                Control0 = {
//                    Type = float64
//                }
//                Control1 = {
//                    Type = float64
//                }
//                Control2 = {
//                    Type = float64
//                }
//                Control3 = {
//                    Type = float64
//                }
//                State0 = {
//                    Type = float64
//                }
//                State1 = {
//                    Type = float64
//                }
//                State2 = {
//                    Type = float64
//                }
//                State3 = {
//                    Type = float64
//                }
            }
        }
//        +PerformanceWriter = {
//            Class = FileDataSource::FileWriter
//            NumberOfBuffers = 10000
//            CPUMask = 1 
//            StackSize = 10000000
//            Filename = "/home/bl8320/MARTe2-sigtools/MARTe2-demos-sigtools/temp/RTApp-FileWriter-Behaviour-performance.csv" 
//            Overwrite = "yes" 
//            FileFormat = "csv"
//            CSVSeparator = "," 
//            StoreOnTrigger = 0 
//            Signals = {
//                Time = { 
//                    Type = uint32
//                }
//                Idle_Thread1_CycleTime = {
//                    Type = uint32
//                } 
//                Run_Thread1_CycleTime = {
//                    Type = uint32
//                }
//                GAMTimer_ReadTime = {
//                    Type = uint32
//                }
//                GAMTimer_ExecTime = {
//                    Type = uint32
//                }
//                GAMTimer_WriteTime = {
//                    Type = uint32
//                }
//                GAMPerformanceWriter_WriteTime = {
//                    Type = uint32
//                }
//            }
//        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = { GAMTimer GAMRef0 }
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = { GAMTimer GAMTrigger GAMRef0 DisplayGAM GAMSignalsWriter }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
