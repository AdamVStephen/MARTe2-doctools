/*
// File : STapp-0004-Waveform-3.cfg
//
// Changelog 
//
// 2022-01-24 Demonstrate variations on a theme of looking at statistics via the web server
//		-5-c.cfg Fix non obvious name typos.
//		-5-b.cfg Add stats to all threads
//		-5-a.cfg Add the other stats options
//		-5.cfg Add a statistics view  ; fix the Main.sh path and reintroduce the CA interface
//            	-4.cfg REMOVED EPICSCAInterface note the need to use the -m command to run it
//            	-3.cfg added EPICSCAInterface and WebRoot, WebServer,StateMachine : runs but no web server on port 8084
//            	Derived from -1.cfg of the same prefix
//
*/
+EPICSCAInterface= {
    Class = EPICS::EPICSCAClient
    StackSize = 1048576
    CPUs = 0x1
    AutoStart = 0
    +PV_STATUS = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:STATUS"
        PVType = int32
    }    
    +PV_COMMAND = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:COMMAND"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = {{"1", "GOTORUN"}, {"0", "GOTOIDLE"}}
        }
    }
    +PV_ERROR_RST = {
        Class = EPICS::EPICSPV
        PVName = "MARTE2-DEMO-APP:RESET"
        PVType = uint32
        Event = {
            Destination = StateMachine
            PVValue = Ignore
            Function = "RESET" 
        }
    }
}
+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2-dev/Resources/HTTP/"
    }    
    +ResourcesDemoHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../Resources/HTTP/"
    }    
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTORUN = {
            Class = Message
            Destination = StateMachine
            Function = GOTORUN
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8084
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 100
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Mode = ExpectsReply
                Function = "Start"
            }
            +StartEPICSCAInterface = {
                Class = Message
                Destination = "EPICSCAInterface"
                Mode = ExpectsReply
                Function = "Start"
            }
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0         
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = "EPICSCAInterface.PV_STATUS"
                Function = CAPut
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }   
    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1000
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32           
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
            }
        }
        +Waveform0 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 50.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                MainsF = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform1 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.5
            Frequency = 100.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains2F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform2 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.25
            Frequency = 150
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains3F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform3 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.125
            Frequency = 200
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains4F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Mains1F_Statistics = {
            Class = StatisticsGAM
            WindowSize =512
            InputSignals = {
                MainsF = {
                    DataSource = DDB1
                    Type = float64
                    //Default = 500
                }
            }
            OutputSignals = {
                Mains1F_avg = {
                    DataSource = DDB1
                    Type = float64
                }
		Mains1F_std = {
                    DataSource = DDB1
                    Type = float64
                }
		Mains1F_min = {
                    DataSource = DDB1
                    Type = float64
                }
		Mains1F_max = {
                    DataSource = DDB1
                    Type = float64
                }

            }
        }
	 +GAMPerformanceWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = Timings
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = Timings
                    Type = uint32           
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = PerformanceWriter
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = PerformanceWriter 
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
            }
        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                MainsF = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains2F = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains3F = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains4F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                MainsF = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains2F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains3F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains4F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +SignalsWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/var/tmp/STapp-0004-3-signals.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = uint32
                }
                MainsF = {
                    Type = float64
                }
                Mains2F = {
                    Type = float64
                }
                Mains3F = {
                    Type = float64
                }
                Mains4F = {
                    Type = float64
                }
            }
        }
        +PerformanceWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/var/tmp/STapp-0004-3-performance.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    Type = uint32
                } 
                Run_Thread1_CycleTime = {
                    Type = uint32
                }
                GAMTimer_ReadTime = {
                    Type = uint32
                }
                GAMTimer_ExecTime = {
                    Type = uint32
                }
                GAMTimer_WriteTime = {
                    Type = uint32
                }
                GAMPerformanceWriter_WriteTime = {
                    Type = uint32
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    //Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3 Mains1F_Statistics}
                    Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3 }
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    //Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3 Mains1F_Statistics GAMSignalsWriter GAMPerformanceWriter}
                    Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3 GAMSignalsWriter GAMPerformanceWriter}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    //Functions = {GAMTimer Mains1F_Statistics}
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
