// File : STapp-0004-Waveform-1-2-Window.cfg
//
// Seeking MathExpressionGAM : git log --name-status --all identifies commit 6b73986 in branch master from 2020 (MARTe2-components)
// - also see specific user story branch #517_MathExpressionGAM
// - checking out Source/Components/GAMs/MathExpressionGAM from master (at 2022-01-16) leaves unresolved MathExpressionParser.h
// - this was added to MARTe2-dev/Source/Core/BareMetal/L4Configuration in commit e231f0b7 Jul 17 2020.
// - also required is RuntimeEvaluator.h which was tracked down to MARTe2-dev/Source/Core/BareMetal/L2Objects but moved to L4Configuration later
// - checking out this from master leads to missing StaticStack.h : this is clearly a losing battle and we need to move forward
//
// Summary of current status : centos7 + 2019 = consistent; centos7 + 2022 = not-consistent ; debian tests: in progress - shout out on Slack
//
// Changelog 
//
// 2022-01-16 
//
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1000
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = Timings
                    Alias = "Run.Thread1_CycleTime"
                    Type = uint32           
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
            }
        }
        +Waveform0 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 50.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                MainsF = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform1 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.5
            Frequency = 100.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains2F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform2 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.25
            Frequency = 150
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains3F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +Waveform3 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 0.125
            Frequency = 200
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Mains4F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMPerformanceWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = DDB1
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = DDB1
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = Timings
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = Timings
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = Timings
                    Type = uint32           
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = PerformanceWriter
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                Run_Thread1_CycleTime = {                   
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_ReadTime = {
                    DataSource = PerformanceWriter 
                    Type = uint32           
                } 
                GAMTimer_ExecTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMTimer_WriteTime = {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
                GAMPerformanceWriter_WriteTime= {
                    DataSource = PerformanceWriter
                    Type = uint32           
                }
            }
        }
        +GAMSignalsWriter = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                MainsF = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains2F = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains3F = {
                    DataSource = DDB1
                    Type = float64
                }
                Mains4F = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = SignalsWriter
                    Type = uint32
                }
                MainsF = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains2F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains3F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
                Mains4F = {
                    DataSource = SignalsWriter
                    Type = float64
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +SignalsWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/var/tmp/STapp-signals.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = uint32
                }
                MainsF = {
                    Type = float64
                }
                Mains2F = {
                    Type = float64
                }
                Mains3F = {
                    Type = float64
                }
                Mains4F = {
                    Type = float64
                }
            }
        }
        +PerformanceWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000
            CPUMask = 1 
            StackSize = 10000000
            Filename = "/var/tmp/STapp-performance.csv" 
            Overwrite = "yes" 
            FileFormat = "csv"
            CSVSeparator = "," 
            StoreOnTrigger = 0 
            Signals = {
                Time = { 
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    Type = uint32
                } 
                Run_Thread1_CycleTime = {
                    Type = uint32
                }
                GAMTimer_ReadTime = {
                    Type = uint32
                }
                GAMTimer_ExecTime = {
                    Type = uint32
                }
                GAMTimer_WriteTime = {
                    Type = uint32
                }
                GAMPerformanceWriter_WriteTime = {
                    Type = uint32
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3}
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer Waveform0 Waveform1 Waveform2 Waveform3 GAMSignalsWriter GAMPerformanceWriter}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
